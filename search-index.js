var N = null;var searchIndex = {};
searchIndex["actix"]={"doc":"Actix is a rust actors framework.","items":[[3,"SpawnHandle","actix","Spawned future handle. Could be used for cancelling spawned future.",N,N],[3,"Addr","","Address of the actor",N,N],[3,"Recipient","","`Recipient` type allows to send one specific message to an actor.",N,N],[3,"WeakAddr","","Weak referenced Addr",N,N],[3,"Arbiter","","Event loop controller",N,N],[3,"Context","","Actor execution context",N,N],[3,"ActorResponse","","Helper type for representing different type of message responses",N,N],[3,"MessageResult","","Helper type that implements `MessageResponse` trait",N,N],[12,"0","","",0,N],[3,"Response","","Helper type for representing different type of message responses",N,N],[3,"Supervisor","","Actor supervisor",N,N],[3,"System","","System is an actor which manages runtime.",N,N],[3,"SystemRunner","","Helper object that runs System's event loop",N,N],[4,"ActorState","","Actor execution state",N,N],[13,"Started","","Actor is started.",1,N],[13,"Running","","Actor is running.",1,N],[13,"Stopping","","Actor is stopping.",1,N],[13,"Stopped","","Actor is stopped.",1,N],[4,"Running","","",N,N],[13,"Stop","","",2,N],[13,"Continue","","",2,N],[4,"MailboxError","","Set of error that can occurred during message delivery process",N,N],[13,"Closed","","",3,N],[13,"Timeout","","",3,N],[5,"run","","Start the System and execute supplied future.",N,[[["f"]]]],[5,"spawn","","Spawns a future on the current arbiter.",N,[[["f"]]]],[11,"alive","","Indicates if actor is alive",1,[[["self"]],["bool"]]],[11,"stopping","","Indicates if actor is stopped of stopping",1,[[["self"]],["bool"]]],[11,"next","","Get next handle",4,[[["self"]],["spawnhandle"]]],[11,"builder","","Spawn new thread and run event loop in spawned thread. Returns address of newly created arbiter. Does not stop the system on panic.",5,[[],["builder"]]],[11,"new","","Spawn new thread and run event loop in spawned thread. Returns address of newly created arbiter. Does not stop the system on panic.",5,[[["t"]],["addr",["arbiter"]]]],[11,"name","","Returns current arbiter's name",5,[[],["string"]]],[11,"current","","Returns current arbiter's address",5,[[],["addr",["arbiter"]]]],[11,"registry","","This function returns arbiter's registry,",5,[[],["registry"]]],[11,"spawn","","Executes a future on the current thread.",5,[[["f"]]]],[11,"spawn_fn","","Executes a future on the current thread.",5,[[["f"]]]],[11,"start","","Start new arbiter and then start actor in created arbiter. Returns `Addr<Syn, A>` of created actor.",5,[[["f"]],["addr"]]],[11,"with_receiver","","",6,[[["addressreceiver"]],["context"]]],[11,"run","","",6,[[["self"],["a"]],["addr"]]],[11,"into_future","","",6,[[["self"],["a"]],["contextfut"]]],[11,"handle","","Handle of the running future",6,[[["self"]],["spawnhandle"]]],[11,"set_mailbox_capacity","","Set mailbox capacity",6,[[["self"],["usize"]]]],[11,"async","","Create async response",7,[[["t"]],["self"]]],[11,"reply","","Create response",7,[[["result"]],["self"]]],[11,"reply","","Create response",8,[[["result"]],["self"]]],[11,"async","","Create async response",8,[[["t"]],["self"]]],[11,"start","","Start new supervised actor in current tokio runtime.",9,[[["f"]],["addr"]]],[11,"start_in_arbiter","","Start new supervised actor in arbiter's thread.",9,[[["addr"],["f"]],["addr"]]],[11,"builder","","Build a new system with a customized tokio runtime.",10,[[],["builder"]]],[11,"new","","Create new system.",10,[[["t"]],["systemrunner"]]],[11,"current","","Get current running system.",10,[[],["system"]]],[11,"with_current","","Execute function with system reference.",10,[[["f"]],["r"]]],[11,"stop","","Stop the system",10,[[["self"]]]],[11,"stop_with_code","","Stop the system with a particular exit code.",10,[[["self"],["i32"]]]],[11,"arbiter","","System arbiter",10,[[["self"]],["addr"]]],[11,"registry","","Get current system registry.",10,[[["self"]],["systemregistry"]]],[11,"run","","This function will start tokio runtime and will finish once the `System::stop()` message get called. Function `f` get called within tokio runtime context.",10,[[["f"]],["i32"]]],[11,"run","","This function will start event loop and will finish once the `System::stop()` function is called.",11,[[["self"]],["i32"]]],[11,"block_on","","Execute a future and wait for result.",11,[[["self"],["f"]],["result"]]],[11,"new","","",12,[[["addresssender"]],["addr"]]],[11,"connected","","Indicates if actor is still alive",12,[[["self"]],["bool"]]],[11,"do_send","","Send message unconditionally",12,[[["self"],["m"]]]],[11,"try_send","","Try send message",12,[[["self"],["m"]],["result",["senderror"]]]],[11,"send","","Send asynchronous message and wait for response.",12,[[["self"],["m"]],["request"]]],[11,"recipient","","Get `Recipient` for specific message type",12,[[["self"]],["recipient"]]],[11,"downgrade","","Downgrade to WeakAddr",12,[[["self"]],["weakaddr"]]],[11,"upgrade","","Attempts to upgrade the `WeakAddr<A>` pointer to an [`Addr<A>`]",13,[[["self"]],["option",["addr"]]]],[11,"do_send","","Send message",14,[[["self"],["m"]],["result",["senderror"]]]],[11,"try_send","","Try send message",14,[[["self"],["m"]],["result",["senderror"]]]],[11,"send","","Send message and asynchronously wait for response.",14,[[["self"],["m"]],["recipientrequest"]]],[0,"actors","","Helper actors",N,N],[0,"mocker","actix::actors","Mocking utility actor This actor wraps any actor, and replaces instances of that actor with mocker actor, which is able to accept all messages which the actor can receive.",N,N],[3,"Mocker","actix::actors::mocker","This actor is able to wrap another actor and accept all the messages the wrapped actor can, passing it to a closure which can mock the response of the actors",N,N],[11,"mock","","",15,[[["box",["fnmut"]]],["mocker"]]],[0,"resolver","actix::actors","DNS resolver and connector utility actor",N,N],[3,"Resolve","actix::actors::resolver","",N,N],[12,"name","","",16,N],[12,"port","","",16,N],[3,"Connect","","",N,N],[12,"name","","",17,N],[12,"port","","",17,N],[12,"timeout","","",17,N],[3,"ConnectAddr","","",N,N],[12,"0","","",18,N],[3,"Resolver","","",N,N],[3,"TcpConnector","","Tcp stream connector",N,N],[4,"ResolverError","","",N,N],[13,"Resolver","","Failed to resolve the hostname",19,N],[13,"InvalidInput","","Address is invalid",19,N],[13,"Timeout","","Connecting took too long",19,N],[13,"IoError","","Connection io error",19,N],[6,"Connector","","",N,N],[6,"ConnectorError","","",N,N],[11,"host","","",16,[[["t"]],["resolve"]]],[11,"host_and_port","","",16,[[["t"],["u16"]],["resolve"]]],[11,"host","","",17,[[["t"]],["connect"]]],[11,"host_and_port","","",17,[[["t"],["u16"]],["connect"]]],[11,"timeout","","Set connect timeout",17,[[["self"],["duration"]],["connect"]]],[11,"new","","",20,[[["resolverconfig"],["resolveropts"]],["resolver"]]],[11,"new","","",21,[[["vecdeque",["socketaddr"]]],["tcpconnector"]]],[11,"with_timeout","","",21,[[["vecdeque",["socketaddr"]],["duration"]],["tcpconnector"]]],[0,"signal","actix::actors","An actor implementation of Unix signal handling",N,N],[3,"Signal","actix::actors::signal","Process signal message",N,N],[12,"0","","",22,N],[3,"ProcessSignals","","An actor implementation of Unix signal handling",N,N],[3,"Subscribe","","Subscribe to process signals.",N,N],[12,"0","","",23,N],[3,"DefaultSignalsHandler","","Default signals handler. This actor sends `SystemExit` message to `System` actor for each of `SIGINT`, `SIGTERM`, `SIGQUIT` signals.",N,N],[4,"SignalType","","Different types of process signals",N,N],[13,"Hup","","SIGHUP",24,N],[13,"Int","","SIGINT",24,N],[13,"Term","","SIGTERM",24,N],[13,"Quit","","SIGQUIT",24,N],[13,"Child","","SIGCHILD",24,N],[0,"clock","actix","A configurable source of time.",N,N],[5,"now","actix::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[3,"Clock","","A handle to a source of time.",N,N],[8,"Now","","Returns `Instant` values representing the current instant in time.",N,N],[10,"now","","Returns an instant corresponding to \"now\".",25,[[["self"]],["instant"]]],[0,"fut","actix","Custom `Future` implementation with `Actix` support",N,N],[3,"AndThen","actix::fut","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"Finish","","A combinator used to convert stream into a future, future resolves when stream completes.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"DropErr","","",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"StreamAndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"StreamFinish","","A combinator used to convert stream into a future, future resolves when stream completes.",N,N],[3,"StreamFold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"StreamMap","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"StreamMapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"StreamThen","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"StreamTimeout","","Future for the `timeout` combinator, interrupts computations if it takes more than `timeout`.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Timeout","","Future for the `timeout` combinator, interrupts computations if it takes more than `timeout`.",N,N],[3,"FutureWrap","","",N,N],[3,"StreamWrap","","",N,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",26,N],[13,"B","","Second branch of the type",26,N],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"wrap_future","","Converts normal future into `ActorFuture`, allowing its processing to use the actor's state.",N,[[["f"]],["futurewrap"]]],[5,"wrap_stream","","Converts normal stream into `ActorStream`",N,[[["s"]],["streamwrap"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",26,N],[11,"new","","",27,[[["s"]],["finish"]]],[8,"ActorFuture","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",28,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",28,N],[16,"Actor","","The actor within which this future runs",28,N],[10,"poll","","",28,N],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",28,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",28,[[["self"],["f"]],["maperr"]]],[11,"drop_err","","Drop this future's error, returning a new future.",28,[[["self"]],["droperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",28,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",28,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",28,[[["self"],["f"]],["andthen"]]],[11,"timeout","","Add timeout to futures chain.",28,N],[8,"ActorStream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",29,N],[16,"Error","","The type of error this stream may generate.",29,N],[16,"Actor","","The actor within which this stream runs.",29,N],[10,"poll","","",29,N],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",29,[[["self"],["f"]],["streammap"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `E`.",29,[[["self"],["f"]],["streammaperr"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",29,[[["self"],["f"]],["streamthen"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",29,[[["self"],["f"]],["streamandthen"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",29,[[["self"],["t"],["f"]],["streamfold"]]],[11,"timeout","","Add timeout to stream.",29,N],[11,"finish","","Converts a stream to a future that resolves when stream finishes.",29,[[["self"]],["streamfinish"]]],[8,"IntoActorFuture","","Class of types which can be converted into an actor future.",N,N],[16,"Future","","The future that this type can be converted into.",30,N],[16,"Item","","The item that the future may resolve with.",30,N],[16,"Error","","The error that the future may resolve with.",30,N],[16,"Actor","","The actor within which this future runs",30,N],[10,"into_future","","Consumes this object and produces a future.",30,N],[8,"WrapFuture","","Helper trait that allows conversion of normal future into `ActorFuture`",N,N],[16,"Future","","The future that this type can be converted into.",31,N],[16,"Item","","The item that the future may resolve with.",31,N],[16,"Error","","The error that the future may resolve with.",31,N],[10,"into_actor","","Convert normal future to a ActorFuture",31,N],[8,"WrapStream","","Helper trait that allows conversion of normal stream into `ActorStream`",N,N],[16,"Stream","","The stream that this type can be converted into.",32,N],[16,"Item","","The item that the future may resolve with.",32,N],[16,"Error","","The error that the future may resolve with.",32,N],[10,"into_actor","","Convert normal stream to a ActorStream",32,N],[0,"io","actix","",N,N],[3,"Writer","actix::io","Wrapper for `AsyncWrite` types",N,N],[3,"FramedWrite","","Wrapper for `AsyncWrite` and `Encoder` types",N,N],[8,"WriteHandler","","Write handler",N,N],[11,"error","","Method is called when writer emits error.",33,N],[11,"finished","","Method is called when writer finishes.",33,N],[11,"new","","",34,[[["t"],["c"]],["writer"]]],[11,"close","","Gracefully close sink",34,[[["self"]]]],[11,"closed","","Check if sink is closed",34,[[["self"]],["bool"]]],[11,"set_buffer_capacity","","Set write buffer capacity",34,[[["self"],["usize"],["usize"]]]],[11,"write","","Send item to a sink.",34,N],[11,"handle","","`SpawnHandle` for this writer",34,[[["self"]],["spawnhandle"]]],[11,"new","","",35,[[["t"],["u"],["c"]],["framedwrite"]]],[11,"from_buffer","","",35,[[["t"],["u"],["bytesmut"],["c"]],["framedwrite"]]],[11,"close","","Gracefully close sink",35,[[["self"]]]],[11,"closed","","Check if sink is closed",35,[[["self"]],["bool"]]],[11,"set_buffer_capacity","","Set write buffer capacity",35,[[["self"],["usize"],["usize"]]]],[11,"write","","Write item",35,N],[11,"handle","","`SpawnHandle` for this writer",35,[[["self"]],["spawnhandle"]]],[0,"msgs","actix","Actix system messages",N,N],[3,"StopArbiter","actix::msgs","Stop arbiter execution",N,N],[12,"0","","",36,N],[3,"StartActor","","Start actor in arbiter's thread",N,N],[3,"Execute","","Execute function in arbiter's thread",N,N],[11,"new","","",37,[[["f"]],["self"]]],[11,"new","","",38,[[["f"]],["self"]]],[11,"exec","","Execute enclosed function",38,[[["self"]],["result"]]],[0,"registry","actix","Actors registry",N,N],[3,"Registry","actix::registry","Actors registry",N,N],[3,"SystemRegistry","","System wide actors registry",N,N],[8,"ArbiterService","","Trait defines arbiter's service.",N,N],[11,"start_service","","Construct and start arbiter service",39,[[],["addr"]]],[11,"service_started","","Method is called during service initialization.",39,[[["self"],["context"]]]],[11,"from_registry","","Get actor's address from arbiter registry",39,[[],["addr"]]],[8,"SystemService","","Trait defines system's service.",N,N],[11,"start_service","","Construct and start system service",40,[[["addr"]],["addr"]]],[11,"service_started","","Method is called during service initialization.",40,[[["self"],["context"]]]],[11,"from_registry","","Get actor's address from system registry",40,[[],["addr"]]],[11,"get","","Query registry for specific actor. Returns address of the actor. If actor is not registered, starts new actor and return address of newly created actor.",41,[[["self"]],["addr"]]],[11,"query","","Check if actor is in registry, if so, return its address",41,[[["self"]],["option",["addr"]]]],[11,"set","","Add new actor to the registry by address, panic if actor is already running",41,[[["self"],["addr"]]]],[11,"get","","Return address of the service. If service actor is not running it get started in the system.",42,[[["self"]],["addr"]]],[11,"query","","Check if actor is in registry, if so, return its address",42,[[["self"]],["option",["addr"]]]],[11,"set","","Add new actor to the registry by address, panic if actor is already running",42,[[["self"],["addr"]]]],[0,"sync","actix","Sync actors support",N,N],[3,"SyncArbiter","actix::sync","Sync arbiter",N,N],[3,"SyncContext","","Sync actor execution context",N,N],[11,"start","","Start new sync arbiter with specified number of worker threads. Returns address of the started actor.",43,[[["usize"],["f"]],["addr"]]],[0,"utils","actix","",N,N],[3,"Condition","actix::utils","",N,N],[3,"TimerFunc","","An `ActorFuture` that runs a function in the actor's context after a specified amount of time.",N,N],[3,"IntervalFunc","","An `ActorStream` that periodically runs a function in the actor's context.",N,N],[11,"wait","","",44,[[["self"]],["receiver"]]],[11,"set","","",44,[[["self"],["t"]]]],[11,"new","","Creates a new `TimerFunc` with the given duration.",45,[[["duration"],["f"]],["timerfunc"]]],[11,"new","","Creates a new `IntervalFunc` with the given interval duration.",46,[[["duration"],["f"]],["intervalfunc"]]],[0,"prelude","actix","The `actix` prelude",N,N],[3,"SpawnHandle","actix::prelude","Spawned future handle. Could be used for cancelling spawned future.",N,N],[3,"Addr","","Address of the actor",N,N],[3,"Recipient","","`Recipient` type allows to send one specific message to an actor.",N,N],[3,"RecipientRequest","","`RecipientRequest` is a `Future` which represents asynchronous message sending process.",N,N],[3,"Request","","`Request` is a `Future` which represents asynchronous message sending process.",N,N],[3,"Arbiter","","Event loop controller",N,N],[3,"Context","","Actor execution context",N,N],[3,"ActorResponse","","Helper type for representing different type of message responses",N,N],[3,"MessageResult","","Helper type that implements `MessageResponse` trait",N,N],[12,"0","","",0,N],[3,"Response","","Helper type for representing different type of message responses",N,N],[3,"Supervisor","","Actor supervisor",N,N],[3,"System","","System is an actor which manages runtime.",N,N],[4,"ActorState","","Actor execution state",N,N],[13,"Started","","Actor is started.",1,N],[13,"Running","","Actor is running.",1,N],[13,"Stopping","","Actor is stopping.",1,N],[13,"Stopped","","Actor is stopped.",1,N],[4,"Running","","",N,N],[13,"Stop","","",2,N],[13,"Continue","","",2,N],[4,"MailboxError","","Set of error that can occurred during message delivery process",N,N],[13,"Closed","","",3,N],[13,"Timeout","","",3,N],[4,"SendError","","",N,N],[13,"Full","","",47,N],[13,"Closed","","",47,N],[6,"ResponseActFuture","","A specialized actor future for async message handler",N,N],[6,"ResponseFuture","","A specialized future for async message handler",N,N],[8,"Actor","","Actors are objects which encapsulate state and behavior.",N,N],[16,"Context","","Actor execution context type",48,N],[11,"started","","Method is called when actor get polled first time.",48,N],[11,"stopping","","Method is called after an actor is in `Actor::Stopping` state. There could be several reasons for stopping. `Context::stop` get called by the actor itself. All addresses to current actor get dropped and no more evented objects left in the context.",48,N],[11,"stopped","","Method is called after an actor is stopped, it can be used to perform any needed cleanup work or spawning more actors. This is final state, after this call actor get dropped.",48,N],[11,"start","","Start new asynchronous actor, returns address of newly created actor.",48,[[["self"]],["addr"]]],[11,"start_default","","Start new asynchronous actor, returns address of newly created actor.",48,[[],["addr"]]],[11,"create","","Use `create` method, if you need `Context` object during actor initialization.",48,[[["f"]],["addr"]]],[8,"ActorContext","","Actor execution context",N,N],[10,"stop","","Immediately stop processing incoming messages and switch to a `stopping` state",49,[[["self"]]]],[10,"terminate","","Terminate actor execution",49,[[["self"]]]],[10,"state","","Actor execution state",49,[[["self"]],["actorstate"]]],[8,"AsyncContext","","Asynchronous execution context",N,N],[10,"address","","Return `Address` of the context",50,[[["self"]],["addr"]]],[10,"spawn","","Spawn async future into context. Returns handle of the item, could be used for cancelling execution.",50,[[["self"],["f"]],["spawnhandle"]]],[10,"wait","","Spawn future into the context. Stop processing any of incoming events until this future resolves.",50,[[["self"],["f"]]]],[10,"waiting","","Check if context is paused (waiting for future completion or stopping)",50,[[["self"]],["bool"]]],[10,"cancel_future","","Cancel future. handle is a value returned by `spawn` method.",50,[[["self"],["spawnhandle"]],["bool"]]],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",50,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","This method is similar to `add_stream` but it skips stream errors.",50,[[["self"],["s"]]]],[11,"notify","","Send message `msg` to self.",50,[[["self"],["m"]]]],[11,"notify_later","","Send message `msg` to self after specified period of time. Returns spawn handle which could be used for cancellation. Notification get cancelled if context's stop method get called.",50,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Execute closure after specified period of time within same Actor and Context. Execution get cancelled if context's stop method get called.",50,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at a specified fixed interval",50,[[["self"],["duration"],["f"]],["spawnhandle"]]],[8,"Supervised","","Actors with ability to restart after failure",N,N],[11,"restarting","","Method called when supervisor restarting failed actor",51,N],[8,"ContextFutureSpawner","","Helper trait which can spawn future into actor's context",N,N],[10,"spawn","","spawn future into `Context<A>`",52,N],[10,"wait","","Spawn future into the context. Stop processing any of incoming events until this future resolves.",52,N],[8,"Handler","","Message handler",N,N],[16,"Result","","The type of value that this handle will return",53,N],[10,"handle","","Method is called for every message received by this Actor",53,N],[8,"Message","","Message type",N,N],[16,"Result","","The type of value that this message will resolved with if it is successful.",54,N],[8,"StreamHandler","","Stream handler",N,N],[10,"handle","","Method is called for every message received by this Actor",55,N],[11,"started","","Method is called when stream get polled first time.",55,N],[11,"error","","Method is called when stream emits error.",55,N],[11,"finished","","Method is called when stream finishes.",55,N],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",55,N],[0,"dev","actix","The `actix` prelude for library developers",N,N],[3,"Envelope","actix::dev","",N,N],[3,"RecipientRequest","","`RecipientRequest` is a `Future` which represents asynchronous message sending process.",N,N],[3,"Request","","`Request` is a `Future` which represents asynchronous message sending process.",N,N],[3,"ContextFut","","",N,N],[3,"ContextParts","","",N,N],[3,"Mailbox","","",N,N],[0,"channel","","",N,N],[3,"AddressReceiver","actix::dev::channel","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"AddressSender","","The transmission end of a channel which is used to send values.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[8,"EnvelopeProxy","actix::dev","",N,N],[16,"Actor","","",56,N],[10,"handle","","handle message within new actor and context",56,N],[8,"ToEnvelope","","Converter trait, packs message to suitable envelope",N,N],[10,"pack","","Pack message into suitable envelope",57,[[["m"],["option",["sender"]]],["envelope"]]],[8,"AsyncContextParts","","",N,N],[10,"parts","","",58,[[["self"]],["contextparts"]]],[8,"MessageResponse","","Trait which defines message response",N,N],[10,"handle","","",59,N],[8,"ResponseChannel","","Trait defines message response channel",N,N],[10,"is_canceled","","",60,[[["self"]],["bool"]]],[10,"send","","",60,N],[6,"ResponseActFuture","actix","A specialized actor future for async message handler",N,N],[6,"ResponseFuture","","A specialized future for async message handler",N,N],[8,"Actor","","Actors are objects which encapsulate state and behavior.",N,N],[16,"Context","","Actor execution context type",48,N],[11,"started","actix::prelude","Method is called when actor get polled first time.",48,N],[11,"stopping","","Method is called after an actor is in `Actor::Stopping` state. There could be several reasons for stopping. `Context::stop` get called by the actor itself. All addresses to current actor get dropped and no more evented objects left in the context.",48,N],[11,"stopped","","Method is called after an actor is stopped, it can be used to perform any needed cleanup work or spawning more actors. This is final state, after this call actor get dropped.",48,N],[11,"start","","Start new asynchronous actor, returns address of newly created actor.",48,[[["self"]],["addr"]]],[11,"start_default","","Start new asynchronous actor, returns address of newly created actor.",48,[[],["addr"]]],[11,"create","","Use `create` method, if you need `Context` object during actor initialization.",48,[[["f"]],["addr"]]],[8,"ActorContext","actix","Actor execution context",N,N],[10,"stop","","Immediately stop processing incoming messages and switch to a `stopping` state",49,[[["self"]]]],[10,"terminate","","Terminate actor execution",49,[[["self"]]]],[10,"state","","Actor execution state",49,[[["self"]],["actorstate"]]],[8,"AsyncContext","","Asynchronous execution context",N,N],[10,"address","","Return `Address` of the context",50,[[["self"]],["addr"]]],[10,"spawn","","Spawn async future into context. Returns handle of the item, could be used for cancelling execution.",50,[[["self"],["f"]],["spawnhandle"]]],[10,"wait","","Spawn future into the context. Stop processing any of incoming events until this future resolves.",50,[[["self"],["f"]]]],[10,"waiting","","Check if context is paused (waiting for future completion or stopping)",50,[[["self"]],["bool"]]],[10,"cancel_future","","Cancel future. handle is a value returned by `spawn` method.",50,[[["self"],["spawnhandle"]],["bool"]]],[11,"add_stream","actix::prelude","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",50,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","This method is similar to `add_stream` but it skips stream errors.",50,[[["self"],["s"]]]],[11,"notify","","Send message `msg` to self.",50,[[["self"],["m"]]]],[11,"notify_later","","Send message `msg` to self after specified period of time. Returns spawn handle which could be used for cancellation. Notification get cancelled if context's stop method get called.",50,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Execute closure after specified period of time within same Actor and Context. Execution get cancelled if context's stop method get called.",50,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at a specified fixed interval",50,[[["self"],["duration"],["f"]],["spawnhandle"]]],[8,"Supervised","actix","Actors with ability to restart after failure",N,N],[11,"restarting","actix::prelude","Method called when supervisor restarting failed actor",51,N],[8,"Handler","actix","Message handler",N,N],[16,"Result","","The type of value that this handle will return",53,N],[10,"handle","","Method is called for every message received by this Actor",53,N],[8,"Message","","Message type",N,N],[16,"Result","","The type of value that this message will resolved with if it is successful.",54,N],[8,"StreamHandler","","Stream handler",N,N],[10,"handle","","Method is called for every message received by this Actor",55,N],[11,"started","actix::prelude","Method is called when stream get polled first time.",55,N],[11,"error","","Method is called when stream emits error.",55,N],[11,"finished","","Method is called when stream finishes.",55,N],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",55,N],[11,"into","actix","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into_actor","","",9,N],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"as_fail","","",3,[[["self"]],["fail"]]],[11,"into","actix::dev","",61,[[["self"]],["u"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"into_actor","","",62,N],[11,"into","","",62,[[["self"]],["u"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"into_future","","",62,[[["self"]],["f"]]],[11,"into","actix::prelude","",47,[[["self"]],["u"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"as_fail","","",47,[[["self"]],["fail"]]],[11,"into","actix::dev::channel","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"into_actor","","",64,N],[11,"into","","",64,[[["self"]],["u"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"into","actix::dev","",65,[[["self"]],["u"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"into_actor","actix::prelude","",66,N],[11,"into","","",66,[[["self"]],["u"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"into_actor","","",67,N],[11,"into","","",67,[[["self"]],["u"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"into","actix::dev","",68,[[["self"]],["u"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"into","actix::actors::mocker","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","actix::actors::resolver","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into_future","","",21,[[["self"]],["f"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"as_fail","","",19,[[["self"]],["fail"]]],[11,"into","actix::actors::signal","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","actix::clock","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"into_future","actix::fut","",72,[[["self"]],["f"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"into_future","","",73,[[["self"]],["f"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"into_actor","","",27,N],[11,"into","","",27,[[["self"]],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into_future","","",27,[[["self"]],["f"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"into_future","","",76,[[["self"]],["f"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"into_future","","",77,[[["self"]],["f"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"into_future","","",79,[[["self"]],["f"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"into_future","","",80,[[["self"]],["f"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"into_future","","",85,[[["self"]],["f"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"into_future","","",86,[[["self"]],["f"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"into_future","","",87,[[["self"]],["f"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"into_future","","",26,[[["self"]],["f"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"into","actix::io","",34,[[["self"]],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","actix::msgs","",36,[[["self"]],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into","actix::registry","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into_actor","actix::sync","",43,N],[11,"into","","",43,[[["self"]],["u"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into_future","","",43,[[["self"]],["f"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"into","actix::utils","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"into_future","","",45,[[["self"]],["f"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"fmt","actix::clock","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",71,[[["self"]],["clock"]]],[11,"default","","",71,[[],["clock"]]],[11,"started","actix::actors::resolver","",20,N],[11,"started","actix::actors::signal","",70,N],[11,"stop","actix","",6,[[["self"]]]],[11,"terminate","","",6,[[["self"]]]],[11,"state","","",6,[[["self"]],["actorstate"]]],[11,"stop","actix::sync","Stop current actor. SyncContext creates and starts new actor.",89,[[["self"]]]],[11,"terminate","","Terminate actor execution. SyncContext creates and starts new actor.",89,[[["self"]]]],[11,"state","","Actor execution state",89,[[["self"]],["actorstate"]]],[11,"spawn","actix","",6,[[["self"],["f"]],["spawnhandle"]]],[11,"wait","","",6,[[["self"],["f"]]]],[11,"waiting","","",6,[[["self"]],["bool"]]],[11,"cancel_future","","",6,[[["self"],["spawnhandle"]],["bool"]]],[11,"address","","",6,[[["self"]],["addr"]]],[11,"parts","","",6,[[["self"]],["contextparts"]]],[11,"handle","","",5,[[["self"],["stoparbiter"],["context"]]]],[11,"handle","","",5,[[["self"],["startactor"],["context"]],["addr"]]],[11,"handle","","",5,[[["self"],["execute"],["context"]],["result"]]],[11,"handle","actix::actors::mocker","",15,N],[11,"handle","actix::actors::resolver","",20,N],[11,"handle","","",20,N],[11,"handle","","",20,N],[11,"handle","actix::actors::signal","",69,N],[11,"handle","","",70,N],[11,"handle","actix","",0,N],[11,"handle","","",12,N],[11,"handle","","",90,N],[11,"handle","","",91,N],[11,"handle","","",7,N],[11,"handle","","",8,N],[11,"pack","","",6,[[["m"],["option",["sender"]]],["envelope"]]],[11,"pack","actix::sync","",89,[[["m"],["option",["syncsender"]]],["envelope"]]],[11,"handle","actix::dev","",65,N],[11,"poll","actix::actors::resolver","",21,[[["self"],["resolver"],["context"]],["poll"]]],[11,"poll","actix::fut","",72,N],[11,"poll","","",26,N],[11,"poll","","",73,N],[11,"poll","","",74,N],[11,"poll","","",76,N],[11,"poll","","",75,N],[11,"poll","","",77,N],[11,"poll","","",79,N],[11,"poll","","",80,N],[11,"poll","","",85,N],[11,"poll","","",86,N],[11,"poll","","",87,N],[11,"poll","actix::utils","",45,N],[11,"poll","actix::fut","",78,N],[11,"poll","","",81,N],[11,"poll","","",82,N],[11,"poll","","",83,N],[11,"poll","","",84,N],[11,"poll","","",88,N],[11,"poll","actix::utils","",46,N],[11,"service_started","actix::actors::signal","",69,N],[11,"into","actix","",12,[[["self"]],["recipient"]]],[11,"default","","",4,[[],["spawnhandle"]]],[11,"default","actix::dev","",68,[[],["self"]]],[11,"default","actix::actors::mocker","",15,[[],["self"]]],[11,"default","actix::actors::resolver","",20,[[],["resolver"]]],[11,"default","actix::actors::signal","",69,[[],["self"]]],[11,"default","","",70,[[],["self"]]],[11,"default","actix::utils","",44,[[],["self"]]],[11,"eq","actix","",1,[[["self"],["actorstate"]],["bool"]]],[11,"eq","","",2,[[["self"],["running"]],["bool"]]],[11,"eq","","",4,[[["self"],["spawnhandle"]],["bool"]]],[11,"ne","","",4,[[["self"],["spawnhandle"]],["bool"]]],[11,"eq","actix::dev::channel","",63,[[["self"],["self"]],["bool"]]],[11,"eq","actix","",12,[[["self"],["self"]],["bool"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"eq","actix::actors::resolver","",16,[[["self"],["resolve"]],["bool"]]],[11,"ne","","",16,[[["self"],["resolve"]],["bool"]]],[11,"eq","","",17,[[["self"],["connect"]],["bool"]]],[11,"ne","","",17,[[["self"],["connect"]],["bool"]]],[11,"eq","","",18,[[["self"],["connectaddr"]],["bool"]]],[11,"ne","","",18,[[["self"],["connectaddr"]],["bool"]]],[11,"eq","actix::actors::signal","",24,[[["self"],["signaltype"]],["bool"]]],[11,"from","actix::fut","",77,[[["result"]],["self"]]],[11,"clone","actix","",1,[[["self"]],["actorstate"]]],[11,"clone","","",2,[[["self"]],["running"]]],[11,"clone","","",4,[[["self"]],["spawnhandle"]]],[11,"clone","","",10,[[["self"]],["system"]]],[11,"clone","actix::dev::channel","",63,[[["self"]],["addresssender"]]],[11,"clone","actix","",12,[[["self"]],["addr"]]],[11,"clone","","",14,[[["self"]],["recipient"]]],[11,"clone","actix::actors::signal","",24,[[["self"]],["signaltype"]]],[11,"clone","actix::registry","",41,[[["self"]],["registry"]]],[11,"clone","","",42,[[["self"]],["self"]]],[11,"drop","actix","",5,[[["self"]]]],[11,"drop","actix::dev::channel","",63,[[["self"]]]],[11,"drop","","",64,[[["self"]]]],[11,"fmt","actix","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::prelude","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::actors::resolver","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::dev","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::dev::channel","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::prelude","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::dev","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::actors::resolver","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::actors::signal","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::fut","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","actix::registry","",42,[[["self"],["formatter"]],["result"]]],[11,"hash","actix","",4,N],[11,"hash","actix::dev::channel","",63,[[["self"],["h"]]]],[11,"hash","actix","",12,[[["self"],["h"]]]],[11,"hash","","",14,[[["self"],["h"]]]],[11,"poll","actix::prelude","",66,[[["self"]],["poll"]]],[11,"poll","","",67,[[["self"]],["poll"]]],[11,"poll","actix::fut","",27,[[["self"]],["poll"]]],[11,"poll","actix::dev::channel","",64,[[["self"]],["poll",["option"]]]],[11,"cause","actix","",3,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",3,[[["self"]],["option",["backtrace"]]]],[11,"cause","actix::actors::resolver","",19,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",19,[[["self"]],["option",["backtrace"]]]],[11,"started","actix::prelude","Method is called when actor get polled first time.",48,N],[11,"stopping","","Method is called after an actor is in `Actor::Stopping` state. There could be several reasons for stopping. `Context::stop` get called by the actor itself. All addresses to current actor get dropped and no more evented objects left in the context.",48,N],[11,"stopped","","Method is called after an actor is stopped, it can be used to perform any needed cleanup work or spawning more actors. This is final state, after this call actor get dropped.",48,N],[11,"start","","Start new asynchronous actor, returns address of newly created actor.",48,[[["self"]],["addr"]]],[11,"start_default","","Start new asynchronous actor, returns address of newly created actor.",48,[[],["addr"]]],[11,"create","","Use `create` method, if you need `Context` object during actor initialization.",48,[[["f"]],["addr"]]],[11,"restarting","","Method called when supervisor restarting failed actor",51,N],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",50,[[["self"],["s"]],["spawnhandle"]]],[11,"add_message_stream","","This method is similar to `add_stream` but it skips stream errors.",50,[[["self"],["s"]]]],[11,"notify","","Send message `msg` to self.",50,[[["self"],["m"]]]],[11,"notify_later","","Send message `msg` to self after specified period of time. Returns spawn handle which could be used for cancellation. Notification get cancelled if context's stop method get called.",50,[[["self"],["m"],["duration"]],["spawnhandle"]]],[11,"run_later","","Execute closure after specified period of time within same Actor and Context. Execution get cancelled if context's stop method get called.",50,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at a specified fixed interval",50,[[["self"],["duration"],["f"]],["spawnhandle"]]],[11,"new","actix::dev","Create new ContextParts instance",61,[[["addresssenderproducer"]],["self"]]],[11,"stop","","Initiate stop process for actor execution",61,[[["self"]]]],[11,"terminate","","Terminate actor execution",61,[[["self"]]]],[11,"state","","Actor execution state",61,[[["self"]],["actorstate"]]],[11,"waiting","","Is context waiting for future completion",61,[[["self"]],["bool"]]],[11,"curr_handle","","Handle of the running future",61,[[["self"]],["spawnhandle"]]],[11,"spawn","","Spawn new future to this context.",61,[[["self"],["f"]],["spawnhandle"]]],[11,"wait","","Spawn new future to this context and wait future completion.",61,[[["self"],["f"]]]],[11,"cancel_future","","Cancel previously scheduled future.",61,[[["self"],["spawnhandle"]],["bool"]]],[11,"capacity","","",61,[[["self"]],["usize"]]],[11,"set_mailbox_capacity","","",61,[[["self"],["usize"]]]],[11,"address","","",61,[[["self"]],["addr"]]],[11,"started","","",61,[[["self"]],["bool"]]],[11,"new","","",62,[[["c"],["a"],["mailbox"]],["self"]]],[11,"ctx","","",62,[[["self"]],["c"]]],[11,"address","","",62,[[["self"]],["addr"]]],[11,"alive","","",62,[[["self"]],["bool"]]],[11,"started","actix::prelude","Method is called when stream get polled first time.",55,N],[11,"error","","Method is called when stream emits error.",55,N],[11,"finished","","Method is called when stream finishes.",55,N],[11,"add_stream","","This method register stream to an actor context and allows to handle `Stream` in similar way as normal actor messages.",55,N],[11,"connected","actix::dev::channel","Is the channel still open",63,[[["self"]],["bool"]]],[11,"send","","Attempts to send a message on this `Sender<A>` with blocking.",63,[[["self"],["m"]],["result",["receiver","senderror"]]]],[11,"try_send","","Attempts to send a message on this `Sender<A>` without blocking.",63,[[["self"],["m"],["bool"]],["result",["senderror"]]]],[11,"do_send","","Send a message on this `Sender<A>` without blocking.",63,[[["self"],["m"]],["result",["senderror"]]]],[11,"downgrade","","Downgrade to `WeakAddressSender` which can later be upgraded",63,[[["self"]],["weakaddresssender"]]],[11,"connected","","Are any senders still connected",64,[[["self"]],["bool"]]],[11,"capacity","","Get channel capacity",64,[[["self"]],["usize"]]],[11,"set_capacity","","Set channel capacity",64,[[["self"],["usize"]]]],[11,"sender","","Get sender side of the channel",64,[[["self"]],["addresssender"]]],[11,"sender_producer","","Create sender producer",64,[[["self"]],["addresssenderproducer"]]],[11,"new","actix::dev","",65,[[["m"],["option",["sender"]]],["envelope"]]],[11,"with_proxy","","",65,[[["box",["envelopeproxy"]]],["envelope"]]],[11,"timeout","actix::prelude","Set message delivery timeout",66,[[["self"],["duration"]],["self"]]],[11,"new","","",67,[[["option",["receiver"]],["option"]],["recipientrequest"]]],[11,"timeout","","Set message delivery timeout",67,[[["self"],["duration"]],["self"]]],[11,"into_inner","","",47,[[["self"]],["t"]]],[11,"new","actix::dev","",68,[[["addressreceiver"]],["self"]]],[11,"capacity","","",68,[[["self"]],["usize"]]],[11,"set_capacity","","",68,[[["self"],["usize"]]]],[11,"connected","","",68,[[["self"]],["bool"]]],[11,"address","","",68,[[["self"]],["addr"]]],[11,"sender_producer","","",68,[[["self"]],["addresssenderproducer"]]],[11,"poll","","",68,N],[11,"new","actix::clock","Return a new `Clock` instance that uses the current execution context's source of time.",71,[[],["clock"]]],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the source of time.",71,[[["t"]],["clock"]]],[11,"system","","Return a new `Clock` instance that uses `Instant::now()` as the source of time.",71,[[],["clock"]]],[11,"now","","Returns an instant corresponding to \"now\" by using the instance's source of time.",71,[[["self"]],["instant"]]]],"paths":[[3,"MessageResult"],[4,"ActorState"],[4,"Running"],[4,"MailboxError"],[3,"SpawnHandle"],[3,"Arbiter"],[3,"Context"],[3,"Response"],[3,"ActorResponse"],[3,"Supervisor"],[3,"System"],[3,"SystemRunner"],[3,"Addr"],[3,"WeakAddr"],[3,"Recipient"],[3,"Mocker"],[3,"Resolve"],[3,"Connect"],[3,"ConnectAddr"],[4,"ResolverError"],[3,"Resolver"],[3,"TcpConnector"],[3,"Signal"],[3,"Subscribe"],[4,"SignalType"],[8,"Now"],[4,"Either"],[3,"Finish"],[8,"ActorFuture"],[8,"ActorStream"],[8,"IntoActorFuture"],[8,"WrapFuture"],[8,"WrapStream"],[8,"WriteHandler"],[3,"Writer"],[3,"FramedWrite"],[3,"StopArbiter"],[3,"StartActor"],[3,"Execute"],[8,"ArbiterService"],[8,"SystemService"],[3,"Registry"],[3,"SystemRegistry"],[3,"SyncArbiter"],[3,"Condition"],[3,"TimerFunc"],[3,"IntervalFunc"],[4,"SendError"],[8,"Actor"],[8,"ActorContext"],[8,"AsyncContext"],[8,"Supervised"],[8,"ContextFutureSpawner"],[8,"Handler"],[8,"Message"],[8,"StreamHandler"],[8,"EnvelopeProxy"],[8,"ToEnvelope"],[8,"AsyncContextParts"],[8,"MessageResponse"],[8,"ResponseChannel"],[3,"ContextParts"],[3,"ContextFut"],[3,"AddressSender"],[3,"AddressReceiver"],[3,"Envelope"],[3,"Request"],[3,"RecipientRequest"],[3,"Mailbox"],[3,"ProcessSignals"],[3,"DefaultSignalsHandler"],[3,"Clock"],[3,"AndThen"],[3,"FromErr"],[3,"Map"],[3,"DropErr"],[3,"MapErr"],[3,"FutureResult"],[3,"StreamAndThen"],[3,"StreamFinish"],[3,"StreamFold"],[3,"StreamMap"],[3,"StreamMapErr"],[3,"StreamThen"],[3,"StreamTimeout"],[3,"Then"],[3,"Timeout"],[3,"FutureWrap"],[3,"StreamWrap"],[3,"SyncContext"],[6,"ResponseActFuture"],[6,"ResponseFuture"]]};
initSearch(searchIndex);
